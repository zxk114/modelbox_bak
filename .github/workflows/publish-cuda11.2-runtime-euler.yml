name: Publish CUDA11.2 Runtime Openeuler
on:
  workflow_dispatch:
  push:
    tags:
      - v*
env:
  BUILD_TYPE: Release
  CUDA_VER: "11-2"
  CUDA_VERSION: "11.2"
  CUDA_CUDART_VERSION: "11.2.152-1"
  VIDEOSDK_VERSION: "9.1.23"
  DOCKERHUB_REPO: "zxk114/modelbox-runtime-tensorflow_2.6.0-cuda_11.2-openeuler-x86_64"
  IMAGE_VERSION: "v1.1.3"

jobs:
  compile:
    runs-on: ubuntu-latest
    container: openeuler:20.03-lts-sp3
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
        echo "Asia/Shanghai" > /etc/timezone
        yum update -y && \
        yum install -y vim gcc gcc-c++ make cmake libnsl python3-perf rsyslog doxygen pciutils gdb net-tools zlib-devel \
                rpm-build gcc-gfortran alsa-lib nss-devel fuse-devel gdbm-devel krb5-devel expat-devel curl-devel bzip2-devel \
                boost-devel ncurses-devel libxml2-devel libssh2-devel openssh-server python3-devel glibc-debuginfo libatomic \
                git clang xauth graphviz-devel sqlite-devel openssl-devel readline-devel mesa-libGL-devel protobuf-c-devel && \
        ls -lh /usr/bin/python* && ln -s python3 /usr/bin/python && yum clean all && \
        rm -rf /var/cache /tmp/* /var/tmp/*
    - name: Install cuda
      run: |
        NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \
        curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/rhel7/${NVARCH}/7fa2af80.pub | sed '/^Version/d' > /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA && \
        echo "$NVIDIA_GPGKEY_SUM  /etc/pki/rpm-gpg/RPM-GPG-KEY-NVIDIA" | sha256sum -c --strict -

        yum install -y libcudnn8-devel-8.1.1.33-1.cuda11.2
        yum install -y --no-install-recommends \
            cuda-cudart-${CUDA_VER}=${CUDA_CUDART_VERSION} \
            cuda-compat-${CUDA_VER} \
            cuda-minimal-build-${CUDA_VER} \
            cuda-libraries-dev-${CUDA_VER} \
            cuda-command-line-tools-${CUDA_VER}
        ln -s cuda-${CUDA_VERSION} /usr/local/cuda

    - name: Install ThirdParty
      run: |
        curl https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.6.0.tar.gz|sudo tar zxC /usr/local/

        curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
        yum install -y nodejs
        npm install -g npm@latest
        npm install -g @angular/cli
        npm cache clean --force

        curl -LJO https://github.com/zxk114/modelbox/releases/download/binary/obs-dev.tar.gz
        tar zxf obs-dev.tar.gz -C /usr/local/
        curl -LJO https://github.com/zxk114/modelbox/releases/download/binary/Video_Codec_SDK_${VIDEOSDK_VERSION}.zip
        unzip -j Video_Codec_SDK_${VIDEOSDK_VERSION}.zip \
            Video_Codec_SDK_${VIDEOSDK_VERSION}/include/cuviddec.h \
            Video_Codec_SDK_${VIDEOSDK_VERSION}/include/nvcuvid.h \
            Video_Codec_SDK_${VIDEOSDK_VERSION}/include/nvEncodeAPI.h \
            -d /usr/local/include
        unzip -j Video_Codec_SDK_${VIDEOSDK_VERSION}.zip \
            Video_Codec_SDK_${VIDEOSDK_VERSION}/Lib/linux/stubs/x86_64/libnvcuvid.so \
            Video_Codec_SDK_${VIDEOSDK_VERSION}/Lib/linux/stubs/x86_64/libnvidia-encode.so \
            -d /usr/local/lib
        ln -s libnvcuvid.so /usr/local/lib/libnvcuvid.so.1
        cp -af /usr/local/cuda/compat/* /usr/local/lib/

        curl https://download.java.net/java/GA/jdk17.0.1/2a2082e5a09d4267845be086888add4f/12/GPL/openjdk-17.0.1_linux-x64_bin.tar.gz|tar zxC /usr/local/
        curl https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz|tar zxC /usr/local/

        yes | python3 -m pip install --upgrade pip
        yes | pip3 install pillow numpy
    - name: CMake
      run: |
        pwd
        export JAVA_HOME=/usr/lib/jvm/jdk-17
        export MAVEN_HOME=/usr/local/apache-maven-3.8.3
        export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
        export PATH=/usr/local/cuda/bin:$JAVA_HOME/bin:$MAVEN_HOME/bin${PATH:+:${PATH}}
        export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}
        ls -lh .
        ldconfig
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DWITH_WEB_UI=on
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: |
        make package -j4
        ls -lh release
        filecount=$(ls release | wc -l)
        dpkgcount=$(ls release | egrep "*.deb" | wc -l)
        artifacts_file=$(ls ${artifacts_path} | grep "cuda"| wc -l)
        if [ ${filecount} -ge 13 ] && [ ${dpkgcount} -ge 11 ] && [ ${artifacts_file} -eq 2 ]; then
            echo "compile success"
        else
            echo "compile failed"
            exit 1
        fi


