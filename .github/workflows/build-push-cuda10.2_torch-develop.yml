name: Publish CUDA10.2_torch Develop
on:
  workflow_dispatch:
  push:
    tags:
      - v*
env:
  CUDA_VER: "10-2"
  CUDA_VERSION: "10.2"
  CUDA_CUDART_VERSION: "10.2.89-1"
  TORCH_VERSION: "1.9.1"
  VIDEOSDK_VERSION: "9.1.23"
  DOCKERHUB_REPO: "zxk114/modelbox-develop-libtorch_1.9.1-cuda_10.2-ubuntu-x86_64"
  IMAGE_VERSION: "1.0.0"

jobs:
  compile:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get remove --purge python3-apt
        sudo apt autoremove
        sudo apt-get install --no-install-recommends -y dbus iproute2 gnupg2 curl ca-certificates
        sudo apt-get install -y python3.7-dev python3-pip python3-apt python3-setuptools
        sudo rm -f /usr/bin/python3 /usr/bin/python
        sudo ln -s python3.7 /usr/bin/python3
        sudo ln -s python3 /usr/bin/python
        sudo apt-get install -y \
             build-essential unzip ffmpeg sudo bash vim gdb git doxygen autoconf cmake openssh-server wget \
             python3-wheel python3-numpy python3-opencv libopencv-dev pkg-config kmod net-tools pciutils \
             libssl-dev libcpprest-dev libswscale-dev libavformat-dev graphviz libgraphviz-dev libfuse-dev libprotobuf-c-dev protobuf-c-compiler
    - name: Install CUDA+TORCH
      run: |
        sudo curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | sudo apt-key add -
        sudo cp -af ./docker/*.list /etc/apt/sources.list.d/
        sudo cp -af ./docker/pkgconfig /usr/lib/
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
                cuda-cudart-${CUDA_VER}=${CUDA_CUDART_VERSION} \
                cuda-compat-${CUDA_VER} \
                cuda-minimal-build-${CUDA_VER} \
                cuda-libraries-dev-${CUDA_VER} \
                cuda-command-line-tools-${CUDA_VER}
        sudo ln -s cuda-${CUDA_VERSION} /usr/local/cuda
        sudo find /usr/ -name *cudnn*|xargs sudo rm -fr
        sudo apt-get install -y libcudnn7-dev=7.6.5.32-1+cuda10.2 
        sudo curl -LJO https://download.pytorch.org/libtorch/cu102/libtorch-cxx11-abi-shared-with-deps-1.9.1%2Bcu102.zip
        sudo unzip libtorch-*.zip -d . >/dev/null 2>&1
        sudo cp -af libtorch/{lib,include,share} /usr/local/
        sudo rm -rf /var/lib/apt/lists/*
    - name: Install ThirdParty
      run: |
        sudo curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
        sudo apt-get install -y nodejs
        sudo npm install -g npm@latest
        sudo npm install -g @angular/cli
        sudo npm cache clean --force

        sudo curl -LJO https://github.com/zxk114/modelbox/releases/download/Video_Codec_SDK_${VIDEOSDK_VERSION}/Video_Codec_SDK_${VIDEOSDK_VERSION}.zip && \
        sudo unzip -j Video_Codec_SDK_${VIDEOSDK_VERSION}.zip \
             Video_Codec_SDK_${VIDEOSDK_VERSION}/include/cuviddec.h \
             Video_Codec_SDK_${VIDEOSDK_VERSION}/include/nvcuvid.h \
             Video_Codec_SDK_${VIDEOSDK_VERSION}/include/nvEncodeAPI.h \
             -d /usr/local/cuda/include
        sudo unzip -j Video_Codec_SDK_${VIDEOSDK_VERSION}.zip \
             Video_Codec_SDK_${VIDEOSDK_VERSION}/Lib/linux/stubs/x86_64/libnvcuvid.so \
             Video_Codec_SDK_${VIDEOSDK_VERSION}/Lib/linux/stubs/x86_64/libnvidia-encode.so \
             -d /usr/local/cuda/lib64/stubs
        sudo ln -s libnvcuvid.so /usr/local/cuda/lib64/stubs/libnvcuvid.so.1

        sudo curl https://download.java.net/java/GA/jdk17.0.1/2a2082e5a09d4267845be086888add4f/12/GPL/openjdk-17.0.1_linux-x64_bin.tar.gz|sudo tar zxC /usr/local/
        sudo curl https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz|sudo tar zxC /usr/local/
        ls -lh /usr/local/*

        sudo yes | sudo python3 -m pip install --upgrade pip
        sudo yes | sudo pip3 install pillow
    - name: Configure ENV
      run: |
        export JAVA_HOME=/usr/lib/jvm/jdk-17
        export MAVEN_HOME=/usr/local/apache-maven-3.8.3
        export LIBRARY_PATH=/usr/local/cuda/lib64/stubs${LIBRARY_PATH:+:${LIBRARY_PATH}}
        export LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/lib:/usr/local/cuda/lib64/stubs${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
        export PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:$JAVA_HOME/bin:$MAVEN_HOME/bin${PATH:+:${PATH}}
        export NVIDIA_VISIBLE_DEVICES=all
        export NVIDIA_DRIVER_CAPABILITIES='video,compute,utility'
        export NVIDIA_REQUIRE_CUDA='cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450'
    - name: CMake
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: |
        make package -j4
        rm -f release/*.rpm
        ls -lh release
    - name: upload-artifact
      uses: actions/upload-artifact@v2
      with:
        name: modelbox-release
        path: ${{github.workspace}}/build/release

  build_image:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_zxk }}
          password: ${{ secrets.DOCKERHUB_TOKEN_zxk }}
      - name: mkdir
        run: mkdir ./release
      - name: download-artifact
        uses: actions/download-artifact@v2
        with:
          name: modelbox-release
          path: ./release/
      - name: Prepare
        run: |
          ls -lh ./release/*
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          file: ./docker/Dockerfile.cuda102.develop
          build-args: |
            CUDA_VER=${{ env.CUDA_VER }}
            CUDA_VERSION=${{ env.CUDA_VERSION }}
            TORCH_VERSION=${{ env.TORCH_VERSION }}
            CUDA_CUDART_VERSION=${{ env.CUDA_CUDART_VERSION }}
            IMAGE_VERSION=${{ env.IMAGE_VERSION }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}:latest
            ${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_VERSION }}
