ARG BASE_IMAGE=ubuntu:18.04
FROM ${BASE_IMAGE} as base

ARG CUDA_VER="11-2"
ARG CUDA_VERSION="11.2"
ARG CUDA_CUDART_VERSION="11.2.152-1"
ARG TRT_VERSION=""
ARG TORCH_VERSION=""
ARG NVIDIA_REQUIRE_CUDA "cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450"

COPY release /opt/release

WORKDIR /root

RUN sed -i "s@http://.*archive.ubuntu.com@http://mirrors.ustc.edu.cn@g" /etc/apt/sources.list && \
    sed -i "s@http://.*security.ubuntu.com@http://mirrors.ustc.edu.cn@g" /etc/apt/sources.list && \
    ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo "Asia/Shanghai" > /etc/timezone && \
    apt update -y && apt upgrade -y && \
    apt install -y python3.7 python3-pip python3-setuptools && \
    apt install --no-install-recommends -y dbus systemd systemd-cron rsyslog iproute2 ca-certificates && \
    rm -f /usr/bin/python3 && \
    ln -s python3.7 /usr/bin/python3 && \
    ln -s python3 /usr/bin/python && \
    apt install -y \
        build-essential sudo bash unzip ffmpeg curl pkg-config\
        python3-dev python3-pip python3-setuptools python3-wheel python3-numpy python3-opencv \
        libssl1.1 libcpprest libswscale4 libavformat57 graphviz libprotobuf-c1 && \
    apt clean all && rm -rf /usr/share/doc/* /usr/share/man/* /var/lib/apt/lists/* /tmp/* /var/tmp/* /etc/apt/sources.list

# Install CUDA
RUN curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-${CUDA_VER}2=${CUDA_CUDART_VERSION} \
    cuda-compat-${CUDA_VER} \
    cuda-nvtx-${CUDA_VER} \
    cuda-libraries-${CUDA_VER} && \
    ln -s cuda-${CUDA_VERSION} /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

# Install TensorRT OR Libtorch
RUN if [ "${CUDA_VERSION}" = "10.2" ]; then \
        if [ -n "${TRT_VERSION}" ]; then
            v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION}" &&\
            echo "deb ${NV_ML_REPO_URL} /" > /etc/apt/sources.list.d/nvidia-ml.list; fi && \
            apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub &&\
            apt-get update &&\
            sudo apt-get install libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
                libnvinfer=${v} libnvonnxparsers=${v} libnvparsers=${v} libnvinfer-plugin=${v} \
                python3-libnvinfer=${v}; \
        elif [ -n "${TORCH_VERSION}" ]; then
            wget https://download.pytorch.org/libtorch/cu102/libtorch-cxx11-abi-shared-with-deps-1.9.1%2Bcu102.zip && \
            unzip libtorch-cxx11-abi-shared-with-deps-1.9.1%2Bcu102.zip -d /root >/dev/null 2>&1 && \
            cp -af libtorch/{lib,include,share} /usr/local/;fi \
        fi && \
    apt-get clean all && rm -rf /var/lib/apt/lists/*
    # 安装jdk
    mkdir /usr/lib/jvm && \
    curl http://192.168.59.112:8080/jdk-17_linux-x64_bin.tar.gz|tar zxC /usr/lib/jvm/ && \
    rm -rf /root/* /root/.pip

RUN mkdir -p /root/.pip && \
    echo "[global]" > /root/.pip/pip.conf && \
    echo "index-url = https://pypi.mirrors.ustc.edu.cn/simple" >>/root/.pip/pip.conf && \
    echo "trusted-host = pypi.mirrors.ustc.edu.cn" >>/root/.pip/pip.conf && \
    echo "timeout = 120" >>/root/.pip/pip.conf && \
    echo "/usr/local/lib" >> /etc/ld.so.conf && \
    python3 -m pip install -U pip && \
    python3 -m pip install --no-cache-dir numpy && \
    python3 -m pip install --no-cache-dir wheel pyyaml requests opencv-python pillow tensorflow-gpu==${TF_VERSION} && \
    python3 -m pip install --no-cache-dir /opt/release/python/modelbox-*.whl && \
    dpkg -i /opt/release/*.deb && \
    rm -rf /root/* /root/.pip /opt/release /opt/*.whl && \
    find /usr/local/ -name "*.a" | xargs rm -f && \
    (cd /lib/systemd/system/sysinit.target.wants/; for i in *; \
    do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \
    rm -f /lib/systemd/system/multi-user.target.wants/*; \
    rm -f /etc/systemd/system/*.wants/*; \
    rm -f /lib/systemd/system/local-fs.target.wants/*; \
    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
    rm -f /lib/systemd/system/basic.target.wants/*; \
    rm -f /lib/systemd/system/anaconda.target.wants/*; \
    sed -i 's/^SystemMaxUse=.*/SystemMaxUse=16M/g' /etc/systemd/journald.conf && \
    sed -i '/ForwardToSyslog/s/^#//g' /etc/systemd/journald.conf && \
    sed -i 's/^\(module(load="imklog")\)/#\1/' /etc/rsyslog.conf && \
    echo "export JAVA_HOME=/usr/lib/jvm/jdk-17" >> /etc/bash.bashrc && \
    echo "export PATH=\${JAVA_HOME}/bin:$PATH" >> /etc/bash.bashrc && \
    systemctl set-default multi-user.target && \
    systemctl mask dev-hugepages.mount sys-fs-fuse-connections.mount && \
    ldconfig &>/dev/null && systemctl enable modelbox

VOLUME ["/sys/fs/cgroup", "/tmp", "/run", "/run/lock"]
STOPSIGNAL SIGRTMIN+3

LABEL com.nvidia.volumes.needed="nvidia_driver" com.nvidia.cuda.verison="${NVIDIA_CUDA_VERSION}"

ENV LD_LIBRARY_PATH=/usr/local/nvidia/lib64:/usr/local/lib:$LD_LIBRARY_PATH
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=video,compute,utility
ENV NVIDIA_REQUIRE_CUDA="${NVIDIA_REQUIRE_CUDA}"

CMD ["/sbin/init", "--log-target=journal"]
