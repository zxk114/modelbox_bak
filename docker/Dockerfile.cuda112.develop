ARG BASE_IMAGE=ubuntu:18.04
FROM ${BASE_IMAGE} as base

COPY release /opt/release
COPY docker/pkgconfig /usr/lib/pkgconfig

ARG CUDA_VER="11-2"
ARG CUDA_VERSION="11.2"
ARG CUDA_CUDART_VERSION="11.2.152-1"
ARG VIDEOSDK_VERSION="9.1.23"

WORKDIR /root

RUN umask 0022 && \
    ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo "Asia/Shanghai" > /etc/timezone && \
    apt update && apt upgrade -y && \
    apt remove --purge python3-apt && \
    apt install -y python3.7-dev python3-pip python3-apt python3-setuptools && \
    apt install --no-install-recommends -y dbus systemd systemd-cron rsyslog iproute2 gnupg2 curl ca-certificates && \
    rm -f /usr/bin/python3 && \
    ln -s python3.7 /usr/bin/python3 && \
    ln -s python3 /usr/bin/python && \
    apt install -y \
        build-essential unzip ffmpeg sudo bash vim gdb git doxygen autoconf cmake openssh-server \
        python3-wheel python3-numpy python3-opencv libopencv-dev pkg-config kmod net-tools pciutils \
        libssl-dev libcpprest-dev libswscale-dev libavformat-dev graphviz libgraphviz-dev libfuse-dev \
        libprotobuf-c-dev protobuf-c-compiler duktape-dev libmosquitto-dev && \
    apt clean all && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    apt-get update && \
    apt install -y libcudnn8=8.1.1.33-1+cuda11.2 && \
    apt install -y libcudnn8-dev=8.1.1.33-1+cuda11.2 && \
    apt-get install -y --no-install-recommends \
        cuda-cudart-${CUDA_VER}=${CUDA_CUDART_VERSION} \
        cuda-compat-${CUDA_VER} \
        cuda-minimal-build-${CUDA_VER} \
        cuda-libraries-dev-${CUDA_VER} \
        cuda-command-line-tools-${CUDA_VER} && \
    ln -s cuda-${CUDA_VERSION} /usr/local/cuda && \
    curl https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.6.0.tar.gz|tar zxC /usr/local/ && \
    apt clean all && rm -rf /var/lib/apt/lists/*

RUN umask 0022 && \
    curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest && npm -v && node -v && \
    npm install -g @angular/cli && \
    npm cache clean --force && \
    curl -LJO https://github.com/zxk114/modelbox/releases/download/binary/obs-dev.tar.gz && \
    tar zxf obs-dev.tar.gz -C /usr/local/ && \
    curl -LJO https://github.com/zxk114/modelbox/releases/download/binary/Video_Codec_SDK_${VIDEOSDK_VERSION}.zip && \
    unzip -j Video_Codec_SDK_${VIDEOSDK_VERSION}.zip \
          Video_Codec_SDK_${VIDEOSDK_VERSION}/include/cuviddec.h \
          Video_Codec_SDK_${VIDEOSDK_VERSION}/include/nvcuvid.h \
          Video_Codec_SDK_${VIDEOSDK_VERSION}/include/nvEncodeAPI.h \
          -d /usr/local/cuda/include && \
    unzip -j Video_Codec_SDK_${VIDEOSDK_VERSION}.zip \
          Video_Codec_SDK_${VIDEOSDK_VERSION}/Lib/linux/stubs/x86_64/libnvcuvid.so \
          Video_Codec_SDK_${VIDEOSDK_VERSION}/Lib/linux/stubs/x86_64/libnvidia-encode.so \
          -d /usr/local/cuda/lib64/stubs && \
    ln -s libnvcuvid.so /usr/local/cuda/lib64/stubs/libnvcuvid.so.1 && \
    curl https://download.java.net/java/GA/jdk17.0.1/2a2082e5a09d4267845be086888add4f/12/GPL/openjdk-17.0.1_linux-x64_bin.tar.gz|tar zxC /usr/local/ && \
    curl https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz|tar zxC /usr/local/ && \
    rm -rf  /usr/local/apache-maven-3.8.4/lib/jansi-native/Windows && \
    apt clean all && rm -rf /var/lib/apt/lists/* /root/* && \
    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    rm -f /usr/bin/python && ln -s python3 /usr/bin/python && \
    echo "/usr/local/lib" >>  /etc/ld.so.conf && \
    sed -i "32aPermitRootLogin yes" /etc/ssh/sshd_config && \
    sed -i 's/^\(module(load="imklog")\)/#\1/' /etc/rsyslog.conf && \
    echo 'export TMOUT=0' >> ~/.bashrc && \
    echo "export JAVA_HOME=/usr/lib/jvm/jdk-17" >> ~/.bashrc && \
    echo "export MAVEN_HOME=/usr/local/apache-maven-3.8.3" >> ~/.bashrc && \
    echo "export PATH=\${JAVA_HOME}/bin:\${MAVEN_HOME}/bin:$PATH" >> ~/.bashrc && \
    echo 'export PS1="\[\e[35;1m\][\u@\h \W]$ \[\e[0m\]"' >> ~/.bashrc && \
    echo '[ -n "${SSH_TTY}" ] && export $(cat /proc/1/environ|tr "\\0" "\\n"|xargs)' >> ~/.bashrc

RUN mkdir -p /root/.pip && \
    echo "[global]" > /root/.pip/pip.conf && \
    echo "index-url = https://pypi.mirrors.ustc.edu.cn/simple" >>/root/.pip/pip.conf && \
    echo "trusted-host = pypi.mirrors.ustc.edu.cn" >>/root/.pip/pip.conf && \
    echo "timeout = 120" >>/root/.pip/pip.conf && \
    python3 -m pip install --upgrade pip && \
    python3 -m pip install --no-cache-dir numpy wheel pyyaml requests opencv-python pillow tensorflow-gpu==2.6.0 && \
    python3 -m pip install --no-cache-dir /opt/release/python/modelbox-*.whl && \
    dpkg -i /opt/release/*.deb && \
    (cd /lib/systemd/system/sysinit.target.wants/; for i in *; \
    do [ $i == systemd-tmpfiles-setup.service ] || rm -f $i; done); \
    rm -f /lib/systemd/system/multi-user.target.wants/*; \
    rm -f /etc/systemd/system/*.wants/*; \
    rm -f /lib/systemd/system/local-fs.target.wants/*; \
    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
    rm -f /lib/systemd/system/basic.target.wants/*; \
    rm -f /lib/systemd/system/anaconda.target.wants/*; \
    sed -i 's/^SystemMaxUse=.*/SystemMaxUse=16M/g' /etc/systemd/journald.conf && \
    sed -i '/ForwardToSyslog/s/^#//g' /etc/systemd/journald.conf && \
    systemctl set-default multi-user.target && \
    systemctl mask dev-hugepages.mount sys-fs-fuse-connections.mount && \
    ldconfig &>/dev/null && systemctl enable modelbox ssh systemd-journald

VOLUME ["/sys/fs/cgroup", "/tmp", "/run", "/run/lock"]
STOPSIGNAL SIGRTMIN+3

LABEL com.nvidia.volumes.needed="nvidia_driver" com.nvidia.cuda.verison="${NVIDIA_CUDA_VERSION}" com.nvidia.cudnn.version="${NV_CUDNN_VERSION}"

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin${PATH:+:${PATH}}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib64:/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES video,compute,utility
ENV NVIDIA_REQUIRE_CUDA 'cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450'

CMD ["/sbin/init", "--log-target=journal"]