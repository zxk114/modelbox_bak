ARG BASE_IMAGE=ubuntu:18.04
FROM ${BASE_IMAGE} as base

ARG CUDA_VER="11-2"
ARG CUDA_VERSION="11.2"
ARG CUDA_CUDART_VERSION="11.2.152-1"
ARG TRT_VERSION=""
ARG TORCH_VERSION=""
ARG NVIDIA_REQUIRE_CUDA "cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441 driver>=450"

WORKDIR /root

RUN umask 0022 && \
    ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo "Asia/Shanghai" > /etc/timezone && \
    apt update && apt upgrade -y && \
    apt install -y python3.7-dev python3-pip python3-setuptools && \
    apt install --no-install-recommends -y dbus systemd systemd-cron rsyslog iproute2 gnupg2 curl ca-certificates && \
    rm -f /usr/bin/python3 && \
    ln -s python3.7 /usr/bin/python3 && \
    ln -s python3 /usr/bin/python && \
    apt install -y \
        build-essential unzip ffmpeg sudo bash vim gdb git doxygen autoconf cmake openssh-server \
        python3-wheel python3-numpy python3-opencv libopencv-dev pkg-config kmod net-tools pciutils \
        libssl-dev libcpprest-dev libswscale-dev libavformat-dev graphviz libgraphviz-dev libfuse-dev libprotobuf-c-dev protobuf-c-compiler && \
    apt clean all && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install CUDA
RUN curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-${CUDA_VER}2=${CUDA_CUDART_VERSION} \
    cuda-compat-${CUDA_VER} \
    cuda-minimal-build-${CUDA_VER} \
    cuda-libraries-dev-${CUDA_VER} \
    cuda-command-line-tools-${CUDA_VER} && \
    ln -s cuda-${CUDA_VERSION} /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

# Install TensorRT/Libtorch/TensorFlow
RUN if [ "${CUDA_VERSION}" == "10.2" ]; then \
        if [ -n "${TRT_VERSION}" ]; then
            v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION}" && \
            curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
            echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
            apt-get update && \
            sudo apt-get install libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
                libnvinfer=${v} libnvonnxparsers=${v} libnvparsers=${v} libnvinfer-plugin=${v} \
                python3-libnvinfer=${v}; \
        elif [ -n "${TORCH_VERSION}" ]; then
            wget https://download.pytorch.org/libtorch/cu102/libtorch-cxx11-abi-shared-with-deps-1.9.1%2Bcu102.zip && \
            unzip libtorch-cxx11-abi-shared-with-deps-1.9.1%2Bcu102.zip -d /root >/dev/null 2>&1 && \
            cp -af libtorch/{lib,include,share} /usr/local/;fi \
    elif [ "${CUDA_VERSION}" == "11.2" ]; then \
        curl https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.6.0.tar.gz|tar zxC /usr/local/; \
    fi && \
    apt-get clean all && rm -rf /var/lib/apt/lists/*

RUN umask 0022 && \
    # 安装nodejs
    curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest && npm -v && node -v && \
    npm install -g @angular/cli && \
    npm cache clean --force && \
    ## 安装Vcodec
    #curl -O http://192.168.59.112:8080/Video_Codec_SDK_9.1.23.zip && \
    #unzip Video_Codec_SDK_9.1.23.zip -d /root >/dev/null 2>&1 && \
    #cp -af Video_Codec_SDK_9.1.23/include /usr/local/ && \
    #cp -af Video_Codec_SDK_9.1.23/Lib/linux/stubs/x86_64/*.so /usr/local/lib/ && \
    # 安装jdk
    curl https://download.java.net/java/GA/jdk17.0.1/2a2082e5a09d4267845be086888add4f/12/GPL/openjdk-17.0.1_linux-x64_bin.tar.gz|tar zxC /usr/local/ && \
    curl http://192.168.59.112:8080/jdk-17_linux-x64_bin.tar.gz|tar zxC /usr/local/ && \
    # 安装maven
    curl https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz|tar zxC /usr/local/ && \
    rm -rf  /usr/local/apache-maven-3.8.4/lib/jansi-native/Windows && \
    # 配置pip源
    mkdir -p /root/.pip && \
    echo "[global]" > /root/.pip/pip.conf && \
    echo "index-url = https://pypi.mirrors.ustc.edu.cn/simple" >>/root/.pip/pip.conf && \
    echo "trusted-host = pypi.mirrors.ustc.edu.cn" >>/root/.pip/pip.conf && \
    echo "timeout = 120" >>/root/.pip/pip.conf && \
    python3 -m pip install --upgrade pip && \
    python3 -m pip install --no-cache-dir numpy && \
    # 其它配置
    rm -rf /root/* && \
    rm -f /usr/bin/python && ln -s python3 /usr/bin/python && \
    echo "/usr/local/lib" >>  /etc/ld.so.conf && \
    sed -i "32aPermitRootLogin yes" /etc/ssh/sshd_config && \
    sed -i 's/^\(module(load="imklog")\)/#\1/' /etc/rsyslog.conf && \
    echo 'export TMOUT=0' >> ~/.bashrc && \
    echo "export JAVA_HOME=/usr/lib/jvm/jdk-17" >> ~/.bashrc && \
    echo "export MAVEN_HOME=/usr/local/apache-maven-3.8.3" >> ~/.bashrc && \
    echo "export PATH=\${JAVA_HOME}/bin:\${MAVEN_HOME}/bin:$PATH" >> ~/.bashrc && \
    echo 'export PS1="\[\e[35;1m\][\u@\h \W]$ \[\e[0m\]"' >> ~/.bashrc && \
    echo '[ -n "${SSH_TTY}" ] && export $(cat /proc/1/environ|tr "\\0" "\\n"|xargs)' >> ~/.bashrc

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf \
    && echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
